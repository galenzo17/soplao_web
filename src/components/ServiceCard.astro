---
import type { ServicePrices } from '../types/pricing.js';
import { getPricesForCity } from '../types/pricing.js';

interface Props {
  title: string;
  description: string;
  prices: ServicePrices;
  image: string;
  direction: 'left' | 'right';
  includes?: string[];
  extras?: string[];
}

const { title, description, prices, image, direction, includes, extras } = Astro.props;

// Get default prices for server-side rendering (Santiago by default)
const santiagoprices = getPricesForCity(prices, 'santiago');
const puconPrices = getPricesForCity(prices, 'pucon');
---
<div
  class="w-full lg:w-1/2"
  data-aos={direction === 'left' ? 'fade-right' : 'fade-left'}
  data-aos-duration="1000"
  data-aos-once="true"
>
  <div class="service-card bg-white mb-4 lg:m-4 lg:rounded-lg lg:shadow-lg overflow-hidden">
    <img
      src={image}
      alt={title}
      class="w-full h-auto lg:h-64 object-cover"
    />
    <div class="p-4 lg:p-6">
      <h3 class="service-title text-xl lg:text-2xl font-bold text-center mb-2 lg:mb-4">{title}</h3>
      <p class="text-sm lg:text-base text-gray-600 text-center mb-4 lg:mb-6">{description}</p>

      {includes && includes.length > 0 && (
        <div class="mb-4 lg:mb-6 bg-green-50 rounded-lg p-4">
          <h4 class="text-base lg:text-lg font-semibold text-green-800 mb-3">‚úîÔ∏è ¬øQu√© incluye?</h4>
          <ul class="space-y-2 text-sm lg:text-base text-gray-700">
            {includes.map(item => (
              <li class="flex items-start">
                <span class="mr-2 text-green-600">‚Ä¢</span>
                <span>{item}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {extras && extras.length > 0 && (
        <div class="mb-4 lg:mb-6 bg-blue-50 rounded-lg p-4">
          <h4 class="text-base lg:text-lg font-semibold text-blue-800 mb-3">üéÅ {title.includes('B√°sica') ? 'Extra incluido (elige 1 sin costo)' : 'Extras disponibles'}</h4>
          <ul class="space-y-2 text-sm lg:text-base text-gray-700">
            {extras.map(item => (
              <li class="flex items-start">
                <span class="mr-2 text-blue-600">‚Ä¢</span>
                <span>{item}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      <div class="city-pricing-container">
        <!-- City indicator -->
        <div class="city-indicator mb-3 text-center">
          <span class="current-city-name text-sm text-gray-500 font-medium">Santiago</span>
        </div>
        
        <!-- Price display -->
        <div class="pricing-display flex flex-col items-center space-y-1 lg:space-y-2">
          <!-- Santiago prices (default visible) -->
          <div class="city-prices" data-city="santiago">
            {santiagoprices.map(item => (
              <div class="w-full flex justify-center items-center space-x-4 text-sm lg:text-base">
                <span class="font-medium text-right min-w-[100px]">{item.label}</span>
                <span>:</span>
                <span class="service-price font-bold min-w-[80px] text-left">{item.price}</span>
              </div>
            ))}
          </div>
          
          <!-- Puc√≥n prices (hidden by default) -->
          <div class="city-prices hidden" data-city="pucon">
            {puconPrices.map(item => (
              <div class="w-full flex justify-center items-center space-x-4 text-sm lg:text-base">
                <span class="font-medium text-right min-w-[100px]">{item.label}</span>
                <span>:</span>
                <span class="service-price font-bold min-w-[80px] text-left">{item.price}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ title }}>
  // Simple city change handler without imports
  function updateServiceCardPrices() {
    const containers = document.querySelectorAll('.city-pricing-container');
    containers.forEach(container => {
      const serviceTitle = container.closest('.service-card')?.querySelector('.service-title')?.textContent;
      if (serviceTitle === title) {
        handleCityChange(container);
      }
    });
  }

  function handleCityChange(container) {
    // Listen for city change events
    document.addEventListener('citychange', (e) => {
      const currentCity = e.detail.city;
      const cityNameElement = container.querySelector('.current-city-name');
      const cityContainers = container.querySelectorAll('.city-prices');

      // Update city name indicator
      if (cityNameElement) {
        cityNameElement.textContent = currentCity === 'santiago' ? 'Santiago' : 'Puc√≥n';
      }

      // Show/hide appropriate price container
      cityContainers.forEach(priceContainer => {
        const containerCity = priceContainer.dataset.city;
        
        if (containerCity === currentCity) {
          priceContainer.classList.remove('hidden');
        } else {
          priceContainer.classList.add('hidden');
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateServiceCardPrices);
  } else {
    updateServiceCardPrices();
  }
</script>

<style>
  :root {
    --color-primary: #0facaf;
    --color-primary-light: #15d8dc;
    --color-primary-dark: #0b8082;
  }

  .service-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .service-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(15, 172, 175, 0.15);
  }

  .service-title {
    color: var(--color-primary-dark);
  }

  .service-price {
    color: var(--color-primary);
  }

  /* Efecto hover en la imagen */
  .service-card img {
    transition: transform 0.3s ease;
  }

  .service-card:hover img {
    transform: scale(1.05);
  }

  .city-indicator {
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .current-city-name {
    color: var(--color-primary);
    font-weight: 500;
  }

  .current-city-name::before {
    content: "üìç ";
    font-size: 0.875rem;
  }

  .pricing-display .city-prices {
    transition: opacity 0.3s ease;
    width: 100%;
  }

  .pricing-display .city-prices.hidden {
    display: none;
  }
</style>