---
import type { ServicePrices } from '../types/pricing.js';

interface Props {
  title: string;
  description: string;
  prices: ServicePrices;
  image: string;
  direction: 'left' | 'right';
}

const { title, description, prices, image, direction } = Astro.props;
---
<div
  class="w-full lg:w-1/2"
  data-aos={direction === 'left' ? 'fade-right' : 'fade-left'}
  data-aos-duration="1000"
  data-aos-once="true"
>
  <div class="service-card bg-white mb-4 lg:m-4 lg:rounded-lg lg:shadow-lg overflow-hidden">
    <img
      src={image}
      alt={title}
      class="w-full h-auto lg:h-64 object-cover"
    />
    <div class="p-4 lg:p-6">
      <h3 class="service-title text-xl lg:text-2xl font-bold text-center mb-2 lg:mb-4">{title}</h3>
      <p class="text-sm lg:text-base text-gray-600 text-center mb-4 lg:mb-6">{description}</p>
      <div class="city-pricing-container">
        <!-- City indicator -->
        <div class="city-indicator mb-3 text-center">
          <span class="current-city-name text-sm text-gray-500 font-medium">Santiago</span>
        </div>
        
        <!-- Price display -->
        <div class="pricing-display flex flex-col items-center space-y-1 lg:space-y-2">
          <!-- Santiago prices (default visible) -->
          <div class="city-prices" data-city="santiago">
            <!-- Prices will be populated by JavaScript -->
          </div>
          
          <!-- Puc√≥n prices (hidden by default) -->
          <div class="city-prices hidden" data-city="pucon">
            <!-- Prices will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ prices, title }}>
  import { cityStore, type City, getCityDisplayName } from '../stores/cityStore.js';
  import { getPricesForCity, isLegacyPricing, isCityPricing } from '../types/pricing.js';

  class ServiceCardManager {
    private container: HTMLElement;
    private unsubscribe?: () => void;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.init();
    }

    private init(): void {
      this.populateInitialPrices();
      this.subscribeToStore();
      this.updateDisplay();
    }

    private populateInitialPrices(): void {
      const santiagoContainer = this.container.querySelector('[data-city="santiago"]');
      const puconContainer = this.container.querySelector('[data-city="pucon"]');
      
      if (!santiagoContainer || !puconContainer) return;

      // Get prices for each city
      const santiagoprices = getPricesForCity(prices, 'santiago');
      const puconPrices = getPricesForCity(prices, 'pucon');

      // Populate Santiago prices
      santiagoContainer.innerHTML = santiagoprices.map(item => 
        `<div class="w-full flex justify-center items-center space-x-4 text-sm lg:text-base">
          <span class="font-medium text-right min-w-[100px]">${item.label}</span>
          <span>:</span>
          <span class="service-price font-bold min-w-[80px] text-left">${item.price}</span>
        </div>`
      ).join('');

      // Populate Puc√≥n prices
      puconContainer.innerHTML = puconPrices.map(item => 
        `<div class="w-full flex justify-center items-center space-x-4 text-sm lg:text-base">
          <span class="font-medium text-right min-w-[100px]">${item.label}</span>
          <span>:</span>
          <span class="service-price font-bold min-w-[80px] text-left">${item.price}</span>
        </div>`
      ).join('');
    }

    private subscribeToStore(): void {
      this.unsubscribe = cityStore.subscribe((city: City) => {
        this.updateDisplay();
      });
    }

    private updateDisplay(): void {
      const currentCity = cityStore.getCurrentCity();
      const cityNameElement = this.container.querySelector('.current-city-name');
      const cityContainers = this.container.querySelectorAll('.city-prices');

      // Update city name
      if (cityNameElement) {
        cityNameElement.textContent = getCityDisplayName(currentCity);
      }

      // Show/hide appropriate price container
      cityContainers.forEach(container => {
        const containerElement = container as HTMLElement;
        const containerCity = containerElement.dataset.city;
        
        if (containerCity === currentCity) {
          containerElement.classList.remove('hidden');
        } else {
          containerElement.classList.add('hidden');
        }
      });
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Initialize for this service card
  const initializeServiceCard = () => {
    const containers = document.querySelectorAll('.city-pricing-container');
    containers.forEach(container => {
      // Check if this container belongs to this specific service
      const serviceTitle = container.closest('.service-card')?.querySelector('.service-title')?.textContent;
      if (serviceTitle === title) {
        new ServiceCardManager(container as HTMLElement);
      }
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeServiceCard);
  } else {
    initializeServiceCard();
  }
</script>

<style>
  :root {
    --color-primary: #0facaf;
    --color-primary-light: #15d8dc;
    --color-primary-dark: #0b8082;
  }

  .service-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .service-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(15, 172, 175, 0.15);
  }

  .service-title {
    color: var(--color-primary-dark);
  }

  .service-price {
    color: var(--color-primary);
  }

  /* Efecto hover en la imagen */
  .service-card img {
    transition: transform 0.3s ease;
  }

  .service-card:hover img {
    transform: scale(1.05);
  }

  .city-indicator {
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .current-city-name {
    color: var(--color-primary);
    font-weight: 500;
  }

  .current-city-name::before {
    content: "üìç ";
    font-size: 0.875rem;
  }

  .pricing-display .city-prices {
    transition: opacity 0.3s ease;
    width: 100%;
  }

  .pricing-display .city-prices.hidden {
    display: none;
  }
</style>