---
// CitySelector component for Santiago/Pucón selection
---

<div class="city-selector">
  <div class="selector-label">
    <span class="label-text">Ciudad:</span>
  </div>
  <div class="selector-tabs">
    <button 
      id="santiago-tab" 
      class="city-tab active" 
      data-city="santiago"
      aria-label="Seleccionar Santiago"
    >
      Santiago
    </button>
    <button 
      id="pucon-tab" 
      class="city-tab" 
      data-city="pucon"
      aria-label="Seleccionar Pucón"
    >
      Pucón
    </button>
  </div>
</div>

<script>
  import { cityStore, type City } from '../stores/cityStore.js';

  // City selector functionality using the centralized store
  class CitySelector {
    private unsubscribe?: () => void;

    constructor() {
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.subscribeToStore();
      this.updateUI();
    }

    private setupEventListeners(): void {
      const tabs = document.querySelectorAll('.city-tab');
      tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLButtonElement;
          const city = target.dataset.city;
          if (city && (city === 'santiago' || city === 'pucon')) {
            cityStore.setCity(city as City);
          }
        });
      });
    }

    private subscribeToStore(): void {
      this.unsubscribe = cityStore.subscribe((city: City) => {
        this.updateUI();
      });
    }

    private updateUI(): void {
      const currentCity = cityStore.getCurrentCity();
      const tabs = document.querySelectorAll('.city-tab');
      
      tabs.forEach(tab => {
        const tabElement = tab as HTMLElement;
        const city = tabElement.dataset.city;
        if (city === currentCity) {
          tabElement.classList.add('active');
          tabElement.setAttribute('aria-pressed', 'true');
        } else {
          tabElement.classList.remove('active');
          tabElement.setAttribute('aria-pressed', 'false');
        }
      });
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  let selector: CitySelector;

  // Initialize when DOM is ready
  const initializeSelector = () => {
    if (selector) {
      selector.destroy();
    }
    selector = new CitySelector();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSelector);
  } else {
    initializeSelector();
  }

  // Initialize the store
  cityStore.initialize();
</script>

<style>
  .city-selector {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .selector-label {
    display: none;
  }

  @media (min-width: 1024px) {
    .selector-label {
      display: block;
    }
  }

  .label-text {
    font-size: 0.875rem;
    color: #6b7280;
    white-space: nowrap;
  }

  .selector-tabs {
    display: flex;
    background-color: #f3f4f6;
    border-radius: 0.5rem;
    padding: 0.125rem;
    gap: 0.125rem;
  }

  .city-tab {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    font-weight: 500;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
    background-color: transparent;
    color: #6b7280;
    white-space: nowrap;
  }

  .city-tab:hover {
    background-color: #e5e7eb;
    color: #374151;
  }

  .city-tab.active {
    background-color: white;
    color: #0facaf;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .city-tab:focus {
    outline: none;
    ring: 2px;
    ring-color: #0facaf;
    ring-opacity: 0.5;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .city-selector {
      margin-left: 0.5rem;
    }
    
    .city-tab {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }
  }
</style>