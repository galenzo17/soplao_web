---
import Header from '../components/Header.astro';
import WhatsAppButton from '../components/WhatsAppButton.astro';
import '../styles/global.css';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/icons/soplao.svg" />
    <link rel="apple-touch-icon" href="/icons/soplao.svg" />
    <link rel="mask-icon" href="/icons/soplao.svg" color="#EAB308" />
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Header />

    <WhatsAppButton
      phone="56997164212"
      message="Hola! Me gustarÃ­a consultar por sus servicios de limpieza"
    />
    <slot />
    <script is:inline src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script is:inline>
      AOS.init({
        duration: 800,
        once: true,
        disable: 'mobile',
      });
    </script>
    <div id="dirt-container"></div>
    <div id="vacuum-cleaner">
      <div class="vacuum-body"></div>
      <div class="vacuum-head"></div>
    </div>
    <script>
document.addEventListener('DOMContentLoaded', () => {
  try {
    const dirtContainer = document.getElementById('dirt-container');
    const vacuum = document.getElementById('vacuum-cleaner');
    const dirtParticles = [];
    const particleCount = 50;
    const collisionDistance = 5;

    const createDirtParticles = () => {
      for (let i = 0; i < particleCount; i++) {
        const dirt = document.createElement('div');
        dirt.classList.add('dirt-particle');

        const x = Math.random() * window.innerWidth;
        const y = Math.random() * window.innerHeight;

        dirt.style.left = `${x}px`;
        dirt.style.top = `${y}px`;
        dirt.style.opacity = Math.random() * 0.5 + 0.5;
        dirt.style.width = `${Math.random() * 15 + 15}px`;
        dirt.style.height = dirt.style.width;

        dirtContainer.appendChild(dirt);
        dirtParticles.push({
          element: dirt,
          x,
          y,
          cleaned: false,
        });
      }
    };

    const moveVacuum = () => {
      const speed = 3.5;

      const findNextDirt = () => {
        for (const dirt of dirtParticles) {
          if (!dirt.cleaned) {
            return dirt;
          }
        }
        return null;
      };

      const checkCollisions = () => {
        const vacuumRect = vacuum.getBoundingClientRect();
        const vacuumCenterX = vacuumRect.left + vacuumRect.width / 2;
        const vacuumCenterY = vacuumRect.top + vacuumRect.height / 2;
        const vacuumRadius = vacuumRect.width / 2;

        for (const dirt of dirtParticles) {
          if (!dirt.cleaned) {
            const dirtRect = dirt.element.getBoundingClientRect();
            const dirtCenterX = dirtRect.left + dirtRect.width / 2;
            const dirtCenterY = dirtRect.top + dirtRect.height / 2;
            const dirtRadius = dirtRect.width / 2;

            const dx = dirtCenterX - vacuumCenterX;
            const dy = dirtCenterY - vacuumCenterY;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < vacuumRadius + dirtRadius + collisionDistance) {
              dirt.cleaned = true;
              dirt.element.style.opacity = '0';
              try {
                dirt.element.remove();
              } catch (err) {
                console.error(err);
              }
            }
          }
        }
      };

      const updatePosition = () => {
        try {
          checkCollisions();

          const nextDirt = findNextDirt();
          
          if (nextDirt) {
            const vacuumRect = vacuum.getBoundingClientRect();
            const vacuumCenterX = vacuumRect.left + vacuumRect.width / 2;
            const vacuumCenterY = vacuumRect.top + vacuumRect.height / 2;

            const dirtRect = nextDirt.element.getBoundingClientRect();
            const dirtCenterX = dirtRect.left + dirtRect.width / 2;
            const dirtCenterY = dirtRect.top + dirtRect.height / 2;

            const dx = dirtCenterX - vacuumCenterX;
            const dy = dirtCenterY - vacuumCenterY;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance > 0) {
              const vx = (dx / distance) * speed;
              const vy = (dy / distance) * speed;

              const newX = vacuumCenterX + vx;
              const newY = vacuumCenterY + vy;

              vacuum.style.left = `${newX}px`;
              vacuum.style.top = `${newY}px`;

              const angle = (Math.atan2(dy, dx) * 180) / Math.PI;
              vacuum.style.transform = `translate(-50%, -50%) rotate(${angle}deg)`;
            }
          } else {
            const allCleaned = dirtParticles.every(
              (dirt) => dirt.cleaned
            );
            if (allCleaned) {
              setTimeout(createDirtParticles, 50);
            }
          }

          requestAnimationFrame(updatePosition);
        } catch (err) {
          console.error(err);
        }
      };

      updatePosition();
    };

    createDirtParticles();
    moveVacuum();
  } catch (err) {
    console.error('Error initializing vacuum cleaner animation:', err);
  }
});
    </script>
  </body>
</html>
